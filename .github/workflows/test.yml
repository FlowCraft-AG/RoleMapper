name: Test Pipeline

on:
  push:
    branches:
      - main
  schedule:
    - cron: '0 2 * * *'
    - cron: '0 16 * * *'
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      TEST_MONGODB_URI: ${{ secrets.TEST_MONGODB_URI }}
      TEST_MONGODB_DATABASE: ${{ secrets.TEST_MONGODB_DATABASE }}
      KEY: ${{ secrets.KEY }}
      CERTIFICATE: ${{ secrets.CERTIFICATE }}
      KEYCLOAK_CLIENT_SECRET: ${{ secrets.KEYCLOAK_CLIENT_SECRET }}

    services:
      keycloak:
        image: quay.io/keycloak/keycloak:21.0.0
        env:
          KEYCLOAK_ADMIN: admin
          KEYCLOAK_ADMIN_PASSWORD: admin
        ports:
          - 8880:8080
        options: >-
          --entrypoint "/opt/keycloak/bin/kc.sh" -- start-dev

    steps:
    - name: Print ref name
      run: echo "This workflow was triggered by ${{ github.ref_name }}"

    - name: Print actor (Collaborator)
      run: echo "The actor is ${{ github.actor }}"

    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '22'

    - name: Cache Node.js modules
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install dependencies
      run: npm install
      working-directory: backend

    - name: Wait for Keycloak
      run: |
        echo "Warte auf Keycloak..."
        sleep 30

    - name: Configure Keycloak with User and Roles
      run: |
        curl -X POST "http://localhost:8880/realms/master/protocol/openid-connect/token" \
          --header "Content-Type: application/x-www-form-urlencoded" \
          --data-urlencode "username=admin" \
          --data-urlencode "password=admin" \
          --data-urlencode "grant_type=password" \
          --data-urlencode "client_id=admin-cli" > admin-token.json

        export TOKEN=$(jq -r .access_token admin-token.json)

        # Erstelle den Realm
        curl -X POST "http://localhost:8880/admin/realms" \
          --header "Authorization: Bearer $TOKEN" \
          --header "Content-Type: application/json" \
          --data '{
            "realm": "flowcraft",
            "enabled": true
          }'

        # Füge den Client hinzu
        curl -X POST "http://localhost:8880/admin/realms/flowcraft/clients" \
          --header "Authorization: Bearer $TOKEN" \
          --header "Content-Type: application/json" \
          --data '{
            "clientId": "rolemapper",
            "directAccessGrantsEnabled": true,
            "publicClient": false,
            "secret": "'"${{ secrets.KEYCLOAK_CLIENT_SECRET }}"'"
          }'

        # Hole die Client-ID
        CLIENT_ID=$(curl -X GET "http://localhost:8880/admin/realms/flowcraft/clients" \
          --header "Authorization: Bearer $TOKEN" \
          --header "Content-Type: application/json" | jq -r '.[] | select(.clientId=="rolemapper").id')

        # Füge die Rollen hinzu
        curl -X POST "http://localhost:8880/admin/realms/flowcraft/clients/$CLIENT_ID/roles" \
          --header "Authorization: Bearer $TOKEN" \
          --header "Content-Type: application/json" \
          --data '{
            "name": "admin"
          }'

        curl -X POST "http://localhost:8880/admin/realms/flowcraft/clients/$CLIENT_ID/roles" \
          --header "Authorization: Bearer $TOKEN" \
          --header "Content-Type: application/json" \
          --data '{
            "name": "user"
          }'

        # Erstelle den Benutzer
        curl -X POST "http://localhost:8880/admin/realms/flowcraft/users" \
          --header "Authorization: Bearer $TOKEN" \
          --header "Content-Type: application/json" \
          --data '{
            "username": "admin",
            "enabled": true,
            "credentials": [{
              "type": "password",
              "value": "p",
              "temporary": false
            }]
          }'

        # Hole die Benutzer-ID
        USER_ID=$(curl -X GET "http://localhost:8880/admin/realms/flowcraft/users" \
          --header "Authorization: Bearer $TOKEN" \
          --header "Content-Type: application/json" | jq -r '.[] | select(.username=="admin").id')

        # Weise die Rolle 'admin' zu
        ADMIN_ROLE_ID=$(curl -X GET "http://localhost:8880/admin/realms/flowcraft/clients/$CLIENT_ID/roles" \
          --header "Authorization: Bearer $TOKEN" \
          --header "Content-Type: application/json" | jq -r '.[] | select(.name=="admin").id')

        curl -X POST "http://localhost:8880/admin/realms/flowcraft/users/$USER_ID/role-mappings/clients/$CLIENT_ID" \
          --header "Authorization: Bearer $TOKEN" \
          --header "Content-Type: application/json" \
          --data '[{ "id": "'$ADMIN_ROLE_ID'", "name": "admin" }]'

    - name: Run ESLint
      run: npm run eslint
      working-directory: backend

    - name: Run tests
      run: npm t
      working-directory: backend

    - name: Run Coverage Tests with Istanbul
      run: npm run test:istanbul
      working-directory: backend

    - name: Upload Jest Test Coverage
      uses: actions/upload-artifact@v4
      with:
        name: jest-coverage
        path: ./backend/coverage

    - name: Audit dependencies
      run: npm audit --audit-level=high
      working-directory: backend
