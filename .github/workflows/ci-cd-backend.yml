name: CI/CD Pipeline Backend

on:
  pull_request:
    branches:
      - '**'
  push:
    branches:
      - main
      - CD/CI---Security
    tags:
      - 'v*'  # Nur für Versionstags (z.B. v1.0.0)
jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    strategy:
      matrix:
        node-version: [22.x]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Print ref name
        run: echo "This workflow was triggered by ${{ github.ref_name }}"

      - name: Print actor
        run: echo "The actor is ${{ github.actor }}"

      - name: Print tag
        run: echo "The actor is ${{ github.ref_name }}"

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Compile TypeScript
        run: npx tsc

      - name: Save dist folder for subsequent jobs
        run: echo "dist=dist" >> $GITHUB_ENV

      # - name: Upload dist folder
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: dist-${{ matrix.node-version }}
      #     path: backend/dist

  analyze:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    needs: build
    strategy:
      matrix:
        node-version: [22.x]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        run: npm ci

      - name: Lint code
        run: npm run eslint

      - name: Security audit
        run: npm audit --omit=dev

      - name: Generate documentation (TypeDoc)
        run: npm run typedoc

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          publish_dir: ./docs/backend

      - name: Comment Lint and Audit Results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'Analysis Complete: Code Lint and Audit Passed ✅',
            })

  package:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    needs: [build, analyze]
    strategy:
      matrix:
        node-version: [22.x]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # - name: Download dist folder
      #   uses: actions/download-artifact@v4
      #   with:
      #     name: dist-${{ matrix.node-version }}
      #     path: backend/dist

      - name: Ensure dist folder is available
        run: |
          if [ -d "$dist" ]; then
            echo "Dist folder exists: $dist"
          else
            echo "Dist folder is missing!"
            exit 1
          fi

      - name: Package distribution
        run: |
         zip -r dist.zip $dist

      - name: Upload package
        uses: actions/upload-artifact@v4
        with:
          name: dist-package-${{ matrix.node-version }}
          path: backend/dist.zip

  docker:
    defaults:
      run:
        working-directory: backend
    runs-on: ubuntu-latest
    needs: package
    strategy:
      matrix:
        node-version: [22.x]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        run: npm ci

      - name: Download dist folder
        uses: actions/download-artifact@v4
        with:
          name: dist-package-${{ matrix.node-version }}
          path: ./backend

      - name: unzip dist folder
        run: unzip dist.zip -d ./dist

      - name: Create .env file
        run: |
          echo "NODE_ENV=development" >> .env
          echo "CLIENT_SECRET=${{ secrets.KEYCLOAK_CLIENT_SECRET }}" >> .env
          echo "SONAR_TOKEN=${{ secrets.SONAR_TOKEN }}" >> .env
          echo "SNYK_TOKEN=${{ secrets.SNYK_TOKEN }}" >> .env

      - name: Build Docker image
        run: |
          docker build \
            --build-arg NODE_ENV=development \
            --build-arg CLIENT_SECRET=${{ secrets.KEYCLOAK_CLIENT_SECRET }} \
            --build-arg SONAR_TOKEN=${{ secrets.SONAR_TOKEN }} \
            --build-arg SNYK_TOKEN=${{ secrets.SNYK_TOKEN }} \
            -t flowcraft/role-mapper:2024.12.1 .

      - name: Clean up .env file
        run: rm .env

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker image to registry
        run: |
          docker tag flowcraft/role-mapper:2024.12.1 calebscript/role-mapper:2024.12.1
          docker push calebscript/role-mapper:2024.12.1
