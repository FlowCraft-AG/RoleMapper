###############################################################################################
# Q U E R I E S
###############################################################################################
type Query {
  """
  Ruft die Daten basierend auf einem spezifischen Input ab.

  Der Input enthält die Kriterien, nach denen die Daten gefiltert werden.
  """
  getData(input: DataInput!): DataPayload!

  """
  Ruft die Rollen für einen bestimmten Prozess und Benutzer ab.

  Diese Abfrage liefert die Rollen, die ein Benutzer innerhalb eines bestimmten Prozesses besitzt.
  """
  getProcessRoles(processId: ID!, userId: String!): RolePayload!

  """
  Ruft gespeicherte Daten (z. B. ein Mandat) basierend auf einer eindeutigen ID ab.

  Diese Abfrage wird verwendet, um Informationen zu spezifischen gespeicherten Entitäten abzurufen.
  """
  getSavedData(id: ID!): MandatePayload

  """
  Ruft Benutzer basierend auf ihrer Funktion ab.

  Diese Abfrage liefert eine Liste von Benutzern, die einer bestimmten Funktion zugeordnet sind.
  """
  getUsersByFunction(id: ID!): MandatePayload

  """
  Ruft die Hierarchie (Vorfahren) einer Organisationseinheit ab.

  Diese Abfrage liefert alle übergeordneten Einheiten für eine spezifische Organisationseinheit.
  """
  getAncestors(id: ID): [OrgUnit]

"""
Ruft eine Liste von Funktionen ab, denen derzeit keine Benutzer zugewiesen sind
und/oder deren Benutzer in einem definierten Zeitraum ausscheiden (z. B. Rente).
Die Ergebnisse basieren auf einem angegebenen Zeitraum und einer Zeiteinheit.
"""
  getUnassignedFunctions(
    """
    Der Zeitraum, für den zukünftige Ereignisse (z. B. Rente oder Pension) betrachtet werden sollen.
    Der Zeitraum ist abhängig von der angegebenen Zeiteinheit.
    Standard: 0 (keine zeitliche Betrachtung).
    """
    lookaheadPeriod: Int = 0

    """
    Die Zeiteinheit für den Zeitraum:
    - "TAGE": Betrachtung in ganzen Tagen.
    - "MONATE": Betrachtung in ganzen Monaten.
    - "JAHRE": Betrachtung in ganzen Jahren.
    Standard: "JAHRE".
    """
    timeUnit: TimeUnit = JAHRE
  ): [UnassignedFunctionsPayload]
}

###############################################################################################G
# M U T A T I O N S
###############################################################################################
type Mutation {
  """
  Erstellt eine neue Entität, z. B. einen Benutzer, eine Funktion oder eine Organisationseinheit.

  Der Input enthält die notwendigen Daten für die Erstellung der Entität.
  """
  createEntity(input: CreateEntityInput!): MutationResponse!

  """
  Aktualisiert eine vorhandene Entität basierend auf Filtern und übergebenen Daten.

  Diese Mutation wird verwendet, um bestehende Daten zu aktualisieren.
  """
  updateEntity(input: UpdateEntityInput!): MutationResponse!

  """
  Löscht eine oder mehrere Entitäten basierend auf Filterbedingungen.

  Diese Mutation entfernt spezifische Daten aus der Datenbank.
  """
  deleteEntity(input: DeleteEntityInput!): MutationResponse!

  """
  Authentifiziert einen Benutzer und gibt ein Token zurück.

  Der Benutzername und das Passwort werden verwendet, um ein Zugriffstoken zu generieren.
  """
  authenticate(username: String!, password: String!): TokenResult!

  """
  Erneuert ein abgelaufenes Token basierend auf einem gültigen Refresh-Token.

  Diese Mutation liefert ein neues Zugriffstoken, wenn das aktuelle abgelaufen ist.
  """
  refreshToken(refreshToken: String!): TokenResult!

  """
  Fügt einen Benutzer zu einer Funktion hinzu.

  Der Benutzer wird basierend auf seiner ID zu einer spezifischen Funktion hinzugefügt.
  """
  addUserToFunction(functionName: String!, userId: String!): Function

  """
  Entfernt einen Benutzer aus einer Funktion.

  Der Benutzer wird basierend auf seiner ID aus einer spezifischen Funktion entfernt.
  """
  removeUserFromFunction(functionName: String!, userId: String!): Function

  """
  Speichert eine spezifische Abfrage für eine Organisationseinheit.

  Diese Mutation wird verwendet, um eine benutzerdefinierte Abfrage zu speichern, die später erneut ausgeführt werden kann.
  """
  saveQuery(functionName: String!, orgUnitId: ID!, input: DataInput!): SavedQueryPayload
}


enum TimeUnit {
  """
  Zeitraum in Jahren.
  """
  JAHRE

  """
  Zeitraum in Monaten.
  """
  MONATE

  """
  Zeitraum in Tagen.
  """
  TAGE
}

"""
Sortierreihenfolge für Abfragen, z. B. aufsteigend (ASC) oder absteigend (DESC).
"""
enum directionInput {
  ASC
  DESC
}

"""
Mögliche Benutzertypen, z. B. 'student' oder 'employee'.
"""
enum UserType {
  student
  employee
}

"""
Verfügbare Entitäten für dynamische Abfragen, z. B. Benutzer oder Organisationseinheiten.
"""
enum EntityType {
  USERS
  MANDATES
  PROCESSES
  ROLES
  ORG_UNITS
}

"""
Mögliche Vergleichsoperatoren für Filterbedingungen, z. B. 'EQ' für Gleichheit.
"""
enum Operator {
  EQ
  IN
  GTE
  LTE
  LIKE
}

"""
Filterbare Felder für dynamische Abfragen, spezifisch für verschiedene Entitäten.
"""
enum FilterOptions {
  _id
  name
  type

  # spezifisch für rollen
  roleId

  # spezifisch für funktionen
  orgUnit
  active
  functionName
  users
  isImpliciteFunction
  isSingleUser

  # spezifisch für prozesse
  processId
  roles

  # spezifisch für orgUnits
  parentId
  supervisor
  alias
  kostenstelleNr

  # spezifisch für user
  userId
  userType
  userRole

  # spezifisch für employee
  costCenter
  department

  # spezifisch für student
  courseOfStudy
  examRegulation
  courseOfStudyUnique
  courseOfStudyShort
  courseOfStudyName
  level

  # spezifisch für profile
  firstName
  lastName
}

"""
Rollenarten für dynamische Abfragen.
"""
enum RoleType {
  COLLECTION
  IMPLICITE_FUNCTION
  IMPLICITE_ORG_UNIT
}

"""
Repräsentiert das Ergebnis der Query `getUnassignedFunctions`.
"""
type UnassignedFunctionsPayload {
  """
  Name der Funktion (z. B. "Professor", "Manager").
  """
  function: Function!

  """
  Liste der Benutzer, die der Funktion zugeordnet sind und in einem definierten Zeitraum ausscheiden.
  """
  userList: [UserRetirementInfo!]!
}

"""
Repräsentiert einen Benutzer, der in einem definierten Zeitraum ausscheidet.
"""
type UserRetirementInfo {
  """
  Die eindeutige ID des Benutzers.
  """
  userId: String!

  """
  Verbleibende Zeit in Tagen, bis der Benutzer ausscheidet.
  """
  timeLeft: Int!
}

"""
Repräsentiert die Rückgabedaten einer Mandatsabfrage.
"""
type MandatePayload {
  """
  Liste der Benutzer, die mit dem Mandat verknüpft sind.
  """
  users: [User!]

  """
  Name der Funktion, die mit dem Mandat verknüpft ist.
  """
  functionName: String

  """
  Gibt an, ob es sich um eine implizite Funktion handelt.
  """
  isImpliciteFunction: Boolean

  """
  Eindeutige ID des Mandats.
  """
  _id: ID

  """
  Organisationseinheit, die mit dem Mandat verknüpft ist.
  """
  orgUnit: ID
}

"""
Rückgabewerte für Rollenabfragen.
"""
type RolePayload {
  """
  Liste der Rollenergebnisse.
  """
  roles: [RoleResult]
}

"""
Repräsentiert das Ergebnis einer Rollenabfrage.
"""
type RoleResult {
  """
  Dynamischer Rollenname (z. B. "Antragssteller", "Rechnungsprüfung").
  """
  roleName: String!

  """
  Benutzer, die dieser Rolle zugeordnet sind.
  """
  users: [UserFunctionResult]
}

"""
Ergebnisstruktur für spezialisierte Benutzerabfragen.
"""
type UserResult {
  """
  Liste der Benutzer, die den Filterbedingungen entsprechen.
  """
  users: [User!]!

  """
  Gesamte Anzahl der Treffer.
  """
  totalCount: Int!
}

"""
Ergebnisstruktur für generische Abfragen.
"""
type DataPayload {
  """
  Liste der Ergebnisse basierend auf der Ziel-Entität.
  """
  data: [EntityResult!]!

  """
  Gesamte Anzahl der Treffer.
  """
  totalCount: Int!
}

"""
Ergebnisstruktur für generische Entitätsabfragen.
"""
union EntityResult = User | Function | Process | OrgUnit | Role

"""
Repräsentiert die Zuweisung eines Benutzers zu einer Funktion.
"""
type UserFunctionResult {
  """
  Der Benutzer, der der Funktion zugeordnet ist.
  """
  user: User

  """
  Name der zugeordneten Funktion.
  """
  functionName: String
}

"""
Repräsentiert einen Benutzer in der Organisation.
"""
type User {
  """
  Eindeutige ID des Benutzers.
  """
  _id: ID

  """
  Benutzer-ID, z. B. RZ-kennung oder Personalnummer.
  """
  userId: String

  """
  Typ des Benutzers, z. B. 'student' oder 'employee'.
  """
  userType: UserType

  """
  Rolle des Benutzers, z. B. 'admin' oder 'viewer'.
  """
  userRole: String

  """
  Organisationseinheit des Benutzers.
  """
  orgUnit: String

  """
  Gibt an, ob der Benutzer aktiv ist.
  """
  active: Boolean

  """
  Profil des Benutzers.
  """
  profile: Profile

  """
  Details zum Studenten (optional).
  """
  student: Student

  """
  Details zum Mitarbeiter (optional).
  """
  employee: Employee

  """
  Gültigkeitsdatum von.
  """
  validFrom: String

  """
  Gültigkeitsdatum bis.
  """
  validUntil: String
}

"""
Details eines Benutzers, falls dieser ein Student ist.
"""
type Student {
  """
  Eindeutige ID des Studenten.
  """
  _id: ID

  """
  Studiengang des Studenten.
  """
  courseOfStudy: String!

  """
  Einzigartiger Studiengangscode.
  """
  courseOfStudyUnique: String!

  """
  Kurzbezeichnung des Studiengangs.
  """
  courseOfStudyShort: String!

  """
  Vollständiger Name des Studiengangs.
  """
  courseOfStudyName: String!

  """
  Studienniveau, z. B. Bachelor oder Master.
  """
  level: String!

  """
  Prüfungsordnung, die für den Studenten gilt.
  """
  examRegulation: String!
}

"""
Details eines Benutzers, falls dieser ein Mitarbeiter ist.
"""
type Employee {
  """
  Kostenstelle des Mitarbeiters.
  """
  costCenter: String!

  """
  Abteilung, in der der Mitarbeiter tätig ist.
  """
  department: String!
}

"""
Profilinformationen eines Benutzers.
"""
type Profile {
  """
  Vorname des Benutzers.
  """
  firstName: String

  """
  Nachname des Benutzers.
  """
  lastName: String
}

"""
Repräsentiert eine Organisationseinheit, z. B. Fakultäten oder Abteilungen.
"""
type OrgUnit {
  """
  Eindeutige ID der Organisationseinheit.
  """
  _id: ID!

  """
  Name der Organisationseinheit.
  """
  name: String!

  """
  ID der übergeordneten Organisationseinheit (optional).
  """
  parentId: ID

  """
  Verantwortlicher der Organisationseinheit.
  """
  supervisor: String

  """
  Alias der Organisationseinheit.
  """
  alias: String

  """
  Kostenstellennummer der Organisationseinheit.
  """
  kostenstelleNr: String

  """
  Typ der Organisationseinheit, z. B. 'academic' oder 'administrative'.
  """
  type: String
}

"""
Repräsentiert eine Funktion innerhalb der Organisation, z. B. 'Professor'.
"""
type Function {
  """
  Eindeutige ID der Funktion.
  """
  _id: ID!

  """
  Name der Funktion.
  """
  functionName: String!

  """
  Liste der Benutzer, die dieser Funktion zugeordnet sind.
  """
  users: [String!]!

  """
  Organisationseinheit, der die Funktion zugeordnet ist.
  """
  orgUnit: ID!

  """
  Typ der Funktion, z. B. 'academic' oder 'administrative'.
  """
  type: String

  """
  Gibt an, ob die Funktion nur von einem Benutzer besetzt werden kann.
  """
  isSingleUser: Boolean

  """
  Gibt an, ob die Funktion implizit ist und nicht manuell zugewiesen werden kann.
  """
  isImpliciteFunction: Boolean

  """
  Dynamische Abfrage, die mit dieser Funktion verknüpft ist.
  """
  query: GraphQlQuery
}

"""
GraphQL-Abfragetyp für dynamische Funktionen.
"""
type GraphQlQuery {
  """
  Die Ziel-Entität der Abfrage, z. B. USERS, MANDATES.
  """
  entity: EntityType

  """
  Filterbedingungen der Abfrage.
  """
  filter: Filter

  """
  Pagination-Parameter der Abfrage.
  """
  pagination: Pagination

  """
  Sortierparameter der Abfrage.
  """
  sort: Sort
}

"""
Filterbedingungen als Output-Typ.
"""
type Filter {
  """
  Das zu filternde Feld, z. B. userId oder orgUnit.
  """
  field: FilterOptions

  """
  Der Vergleichsoperator, z. B. EQ oder IN.
  """
  operator: Operator

  """
  Der Vergleichswert.
  """
  value: String

  """
  Logische UND-Verknüpfung mit weiteren Filtern.
  """
  AND: [Filter]

  """
  Logische ODER-Verknüpfung mit weiteren Filtern.
  """
  OR: [Filter]

  """
  Logische NOR-Verknüpfung mit weiteren Filtern.
  """
  NOR: [Filter]
}

"""
Pagination-Parameter als Output-Typ.
"""
type Pagination {
  """
  Anzahl der zurückzugebenden Ergebnisse.
  """
  limit: Int
  """
  Startpunkt der Ergebnisse.
  """
  offset: Int
}

"""
Sortierparameter als Output-Typ.
"""
type Sort {
  """
  Feld, nach dem sortiert werden soll.
  """
  field: FilterOptions
  """
  Sortierreihenfolge, z. B. ASC oder DESC.
  """
  direction: directionInput
}

"""
Repräsentiert einen Prozess, z. B. 'Dienstreiseantrag'.
"""
type Process {
  """
  Eindeutige ID des Prozesses.
  """
  _id: ID!
  """
  Name des Prozesses.
  """
  parentId: String
  name: String
  """
  Eindeutige Prozess-ID.
  """
  processId: String
  """
  Liste der Rollen, die mit dem Prozess verknüpft sind.
  """
  roles: [ProcessRole]
}

"""
Definiert eine Rolle innerhalb eines Prozesses.
"""
type ProcessRole {
  """
  Eindeutiger Schlüssel der Rolle.
  """
  roleName: String
  """
  Eindeutige ID der Rolle.
  """
  roleId: String

  """
  Typ der Rolle, z. B. 'COLLECTION' oder 'IMPLICITE'.
  """
  roleType: RoleType
}

# Rollen mit dynamischen Abfragen
"""
Definiert eine Rolle in der Organisation mit Abfragebedingungen.
"""
type Role {
  """
  Eindeutige ID der Rolle.
  """
  _id: ID!
  """
  Name der Rolle.
  """
  name: String!
  """
  Eindeutige ID der Rolle.
  """
  roleId: String!
  """
  Dynamische Abfragebedingungen für die Rolle.
  """
  query: [QueryStage!]!
}

"""
Dynamische Abfragebedingungen für Rollen.
"""
type QueryStage {
  """
  Feldname der Abfragebedingung.
  """
  key: String!
  """
  Vergleichswert der Abfragebedingung.
  """
  value: String!
}

"""
Rückgabe einer gespeicherten Abfrage.
"""
type SavedQueryPayload {
  """
  Gibt an, ob die Operation erfolgreich war.
  """
  success: Boolean!

  """
  Nachricht zur Operation, z. B. Fehlermeldung.
  """
  message: String

  """
  Das Ergebnis der gespeicherten Abfrage.
  """
  result: Function
}

"""
Generisches Ergebnis für Mutations.
"""
type MutationResponse {
  """
  Gibt an, ob die Operation erfolgreich war.
  """
  success: Boolean!
  """
  Zusätzliche Informationen oder Fehlermeldungen.
  """
  message: String
  """
  Das Ergebnis der Mutation, z. B. die erstellte oder aktualisierte Entität.
  """
  result: EntityResult
  """
  Anzahl der betroffenen Entitäten.
  """
  affectedCount: Int
  """
  Warnungen oder Hinweise zur Operation.
  """
  warnings: [String]
}

"""
Ergebnis einer Authentifizierungsoperation.
"""
type TokenResult {
  """
  Zugriffstoken für authentifizierte Operationen.
  """
  access_token: String!

  """
  Gültigkeitsdauer des Zugriffstokens (in Sekunden).
  """
  expires_in: Int!

  """
  Token zur Erneuerung des Zugriffstokens.
  """
  refresh_token: String!

  """
  Gültigkeitsdauer des Refresh-Tokens (in Sekunden).
  """
  refresh_expires_in: Int!

  """
  ID-Token, das Benutzerinformationen enthält.
  """
  id_token: String!

  """
  Gültigkeitsbereich des Tokens.
  """
  scope: String!
}

"""
Input-Parameter für generische Abfragen.
"""
input DataInput {
  """
  Ziel-Entität für die Abfrage, z. B. USERS oder ROLES.
  """
  entity: EntityType!
  """
  Filterbedingungen, um die Abfrage zu präzisieren.
  """
  filter: FilterInput
  """
  Pagination-Parameter zur Steuerung der Ergebnisse.
  """
  pagination: PaginationInput
  """
  Sortierparameter für die Ergebnisse.
  """
  sort: SortInput
}

"""
Pagination-Parameter für die Steuerung von Ergebnisgrößen.
"""
input PaginationInput {
  """
  Anzahl der zurückzugebenden Ergebnisse (Standard: 10).
  """
  limit: Int = 10
  """
  Startpunkt der Ergebnisse (Standard: 0).
  """
  offset: Int = 0
}

"""
Filterbedingungen für Abfragen.
"""
input FilterInput {
  """
  Das zu filternde Feld, z. B. userId oder orgUnit.
  """
  field: FilterOptions

  """
  Der Vergleichsoperator, z. B. EQ oder IN.
  """
  operator: Operator

  """
  Der Vergleichswert.
  """
  value: String

  """
  Logische UND-Verknüpfung mit weiteren Filtern.
  """
  AND: [FilterInput]

  """
  Logische ODER-Verknüpfung mit weiteren Filtern.
  """
  OR: [FilterInput]

  """
  Logische NOR-Verknüpfung mit weiteren Filtern.
  """
  NOR: [FilterInput]
}

"""
Sortierparameter für Abfragen.
"""
input SortInput {
  """
  Feld, nach dem sortiert werden soll.
  """
  field: FilterOptions

  """
  Sortierreihenfolge, z. B. ASC oder DESC.
  """
  direction: directionInput
}

"""
Input für das Erstellen einer neuen Entität.
"""
input CreateEntityInput {
  """
  Ziel-Entität, z. B. USERS, MANDATES.
  """
  entity: EntityType!

  """
  Daten für die neue Entität.
  """
  userData: CreateUserInput
  functionData: CreateFunctionInput
  processData: CreateProcessInput
  orgUnitData: CreateOrgUnitInput
  roleData: CreateRoleInput
}

"""
Input-Daten für die Erstellung eines Benutzers.
"""
input CreateUserInput {
  """
  Benutzer-ID (z. B. RZ-Kennung oder Personalnummer).
  """
  userId: String!

  """
  Typ des Benutzers, z. B. student oder employee.
  """
  userType: String!

  """
  Rolle des Benutzers, z. B. admin oder viewer.
  """
  userRole: String!

  """
  Organisationseinheit des Benutzers.
  """
  orgUnit: String

  """
  Gibt an, ob der Benutzer aktiv ist. Standardwert ist true.
  """
  active: Boolean = true

  """
  Details, falls der Benutzer ein Student ist.
  """
  student: CreateStudentInput

  """
  Details, falls der Benutzer ein Mitarbeiter ist.
  """
  employee: CreateEmployeeInput
}

"""
Input-Daten für die Erstellung eines Studenten.
"""
input CreateStudentInput {
  """
  Studiengang des Studenten.
  """
  courseOfStudy: String!

  """
  Einzigartiger Studiengangscode.
  """
  courseOfStudyUnique: String!

  """
  Studienniveau, z. B. Bachelor oder Master.
  """
  level: String!

  """
  Prüfungsordnung, die für den Studenten gilt.
  """
  examRegulation: String!
}

"""
Input-Daten für die Erstellung eines Mitarbeiters.
"""
input CreateEmployeeInput {
  """
  Kostenstelle des Mitarbeiters.
  """
  costCenter: String!

  """
  Abteilung, in der der Mitarbeiter tätig ist.
  """
  department: String!
}

"""
Input-Daten für die Erstellung einer Funktion.
"""
input CreateFunctionInput {
  """
  Name der Funktion.
  """
  functionName: String!

  """
  Organisationseinheit, der die Funktion zugeordnet ist.
  """
  orgUnit: String!

  """
  Typ der Funktion, z. B. academic oder administrative.
  """
  type: String

  """
  Liste der Benutzer, die der Funktion zugeordnet sind.
  """
  users: [String!]!

  """
  Gibt an, ob die Funktion nur von einem Benutzer besetzt werden kann.
  """
  isSingleUser: Boolean

  """
  Gibt an, ob die Funktion implizit ist und nicht manuell zugewiesen werden kann.
  """
  isImpliciteFunction: Boolean
}

"""
Input-Daten für die Erstellung eines Prozesses.
"""
input CreateProcessInput {
  """
  Eindeutige ID des Prozesses.
  """
  processId: String!

  """
  Name des Prozesses.
  """
  name: String!

  """
  Liste der Rollen, die mit dem Prozess verknüpft sind.
  """
  roles: [ProcessRoleInput!]!
}

"""
Input-Daten für eine Rolle innerhalb eines Prozesses.
"""
input ProcessRoleInput {
  """
  Schlüssel der Rolle.
  """
  roleName: String!

  """
  Eindeutige ID der Rolle.
  """
  roleId: String!

  """
  Typ der Rolle, z. B. COLLECTION.
  """
  roleType: RoleType!
}

"""
Input-Daten für die Erstellung einer Organisationseinheit.
"""
input CreateOrgUnitInput {
  """
  Name der Organisationseinheit.
  """
  name: String!

  """
  ID der übergeordneten Organisationseinheit (optional).
  """
  parentId: ID

  """
  Verantwortlicher der Organisationseinheit (optional).
  """
  supervisor: String
}

"""
Input-Daten für die Erstellung einer Rolle.
"""
input CreateRoleInput {
  """
  Eindeutige ID der Rolle.
  """
  roleId: String!

  """
  Name der Rolle.
  """
  name: String!

  """
  Dynamische Abfragebedingungen für die Rolle.
  """
  query: [QueryStageInput!]
}

"""
Dynamische Abfragebedingungen für Rollen.
"""
input QueryStageInput {
  """
  Feldname der Abfragebedingung.
  """
  key: String!

  """
  Vergleichswert der Abfragebedingung.
  """
  value: String!
}

"""
Input für das Aktualisieren von Entitäten.
"""
input UpdateEntityInput {
  """
  Ziel-Entität, z. B. USERS, MANDATES.
  """
  entity: EntityType!
  """
  Filterbedingungen, um die zu aktualisierende Entität zu finden.
  """
  filter: FilterInput
  """
  Neue Werte für die Entität.
  """
  userData: UpdateUserInput
  functionData: UpdateFunctionInput
  processData: UpdateProcessInput
  orgUnitData: UpdateOrgUnitInput
  roleData: UpdateRoleInput
}

"""
Input-Daten für die Aktualisierung eines Benutzers.
"""
input UpdateUserInput {
  """
  Benutzer-ID.
  """
  userId: String

  """
  Typ des Benutzers, z. B. student oder employee.
  """
  userType: String

  """
  Rolle des Benutzers.
  """
  userRole: String

  """
  Organisationseinheit des Benutzers.
  """
  orgUnit: String

  """
  Gibt an, ob der Benutzer aktiv ist.
  """
  active: Boolean

  """
  Gültigkeitszeitraum des Benutzers (von).
  """
  validFrom: String

  """
  Gültigkeitszeitraum des Benutzers (bis).
  """
  validUntil: String

  """
  Details zum Studenten (falls zutreffend).
  """
  student: UpdateStudentInput

  """
  Details zum Mitarbeiter (falls zutreffend).
  """
  employee: UpdateEmployeeInput
}

"""
Input-Daten für die Aktualisierung von Studenteninformationen.
"""
input UpdateStudentInput {
  """
  Studiengang des Studenten.
  """
  courseOfStudy: String

  """
  Studienniveau, z. B. Bachelor oder Master.
  """
  level: String

  """
  Prüfungsordnung, die für den Studenten gilt.
  """
  examRegulation: String
}

"""
Input-Daten für die Aktualisierung von Mitarbeiterinformationen.
"""
input UpdateEmployeeInput {
  """
  Kostenstelle des Mitarbeiters.
  """
  costCenter: String

  """
  Abteilung, in der der Mitarbeiter tätig ist.
  """
  department: String
}

"""
Input-Daten für die Aktualisierung einer Funktion.
"""
input UpdateFunctionInput {
  """
  Name der Funktion.
  """
  functionName: String

  """
  Organisationseinheit, der die Funktion zugeordnet ist.
  """
  orgUnit: String

  """
  Typ der Funktion, z. B. academic oder administrative.
  """
  type: String

  """
  Liste der Benutzer, die der Funktion zugeordnet sind.
  """
  users: [String!]

  """
  Gibt an, ob die Funktion nur von einem Benutzer besetzt werden kann.
  """
  isSingleUser: Boolean
}

"""
Input-Daten für die Aktualisierung eines Prozesses.
"""
input UpdateProcessInput {
  """
  Eindeutige ID des Prozesses.
  """
  processId: String

  """
  Name des Prozesses.
  """
  name: String

  """
  Liste der Rollen, die mit dem Prozess verknüpft sind.
  """
  roles: [ProcessRoleInput]
}

"""
Input-Daten für die Aktualisierung einer Organisationseinheit.
"""
input UpdateOrgUnitInput {
  """
  Eindeutige ID der Organisationseinheit.
  """
  orgUnitId: String

  """
  Name der Organisationseinheit.
  """
  name: String

  """
  ID der übergeordneten Organisationseinheit.
  """
  parentId: String

  """
  Verantwortlicher der Organisationseinheit.
  """
  supervisor: String
}

"""
Input-Daten für die Aktualisierung einer Rolle.
"""
input UpdateRoleInput {
  """
  Eindeutige ID der Rolle.
  """
  roleId: String

  """
  Name der Rolle.
  """
  name: String

  """
  Dynamische Abfragebedingungen für die Rolle.
  """
  query: [QueryStageInput]
}

"""
Input für das Löschen von Entitäten.
"""
input DeleteEntityInput {
  """
  Ziel-Entität, z. B. USERS, MANDATES.
  """
  entity: EntityType!
  """
  Filterbedingungen, um die zu löschende Entität zu identifizieren.
  """
  filter: FilterInput
}
