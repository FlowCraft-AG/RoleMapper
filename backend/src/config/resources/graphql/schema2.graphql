type Mutation {
  """
  Erstellt eine neue Entität, z. B. einen Benutzer, eine Funktion oder eine Organisationseinheit.
  """
  createEntity(input: CreateEntityInput!): MutationResponse!

  """
  Aktualisiert eine vorhandene Entität basierend auf Filtern und übergebenen Daten.
  """
  updateEntity(input: UpdateEntityInput!): MutationResponse!

  """
  Löscht eine oder mehrere Entitäten basierend auf Filterbedingungen.
  """
  deleteEntity(input: DeleteEntityInput!): MutationResponse!

  """
  Authentifiziert einen Benutzer und gibt ein Token zurück.
  """
  authenticate(username: String!, password: String!): TokenResult!

  """
  Erneuert ein abgelaufenes Token basierend auf einem gültigen Refresh-Token.
  """
  refreshToken(refreshToken: String!): TokenResult!
}

union CreateDataInput =
  | CreateUserInput
  | CreateFunctionInput
  | CreateProcessInput
  | CreateOrgUnitInput
  | CreateRoleInput
union UpdateDataInput =
  | UpdateUserInput
  | UpdateFunctionInput
  | UpdateProcessInput
  | UpdateOrgUnitInput
  | UpdateRoleInput

"""
Input für das Erstellen einer neuen Entität.
"""
input CreateEntityInput {
  """
  Ziel-Entität, z. B. USERS, MANDATES.
  """
  entity: EntityType!
  """
  Daten für die neue Entität.
  """
  data: CreateDataInput!
}

input CreateUserInput {
  userId: String!
  userType: String!
  userRole: String!
  orgUnit: String
  active: Boolean
  student: CreateStudentInput
  employee: CreateEmployeeInput
}

input CreateStudentInput {
  courseOfStudy: String!
  courseOfStudyUnique: String!
  level: String!
  examRegulation: String!
}

input CreateEmployeeInput {
  costCenter: String!
  department: String!
}

input CreateFunctionInput {
  functionName: String!
  orgUnit: String!
  type: String
  users: [String!]!
}

input CreateProcessInput {
  processId: String!
  name: String!
  roles: [ProcessRoleInput!]!
}

input ProcessRoleInput {
  roleKey: String!
  roleId: String!
}

input CreateOrgUnitInput {
  name: String!
  parentId: String
  supervisor: String
}

input CreateRoleInput {
  roleId: String!
  name: String!
  query: [QueryStageInput!]
}

input QueryStageInput {
  key: String!
  value: String!
}

input UpdateUserInput {
  userId: String!
  userType: String
  userRole: String
  orgUnit: String
  active: Boolean
  validFrom: String
  validUntil: String
  student: UpdateStudentInput
  employee: UpdateEmployeeInput
}

input UpdateStudentInput {
  courseOfStudy: String
  level: String
  examRegulation: String
}

input UpdateEmployeeInput {
  costCenter: String
  department: String
}

input UpdateFunctionInput {
  functionName: String!
  orgUnit: String
  type: String
  users: [String!]
}

input UpdateProcessInput {
  processId: String!
  name: String
  roles: [ProcessRoleInput]
}

input UpdateOrgUnitInput {
  orgUnitId: String!
  name: String
  parentId: String
  supervisor: String
}

input UpdateRoleInput {
  roleId: String!
  name: String
  query: [QueryStageInput]
}

"""
Input für das Aktualisieren von Entitäten.
"""
input UpdateEntityInput {
  """
  Ziel-Entität, z. B. USERS, MANDATES.
  """
  entity: EntityType!
  """
  Filterbedingungen, um die zu aktualisierende Entität zu finden.
  """
  filters: [FilterInput!]!
  """
  Neue Werte für die Entität.
  """
  data: UpdateDataInput!
}

"""
Input für das Löschen von Entitäten.
"""
input DeleteEntityInput {
  """
  Ziel-Entität, z. B. USERS, MANDATES.
  """
  entity: EntityType!
  """
  Filterbedingungen, um die zu löschende Entität zu identifizieren.
  """
  filters: [FilterInput!]!
}

"""
Details für das Erstellen eines Studenten.
"""
input CreateStudentInput {
  courseOfStudy: String!
  courseOfStudyUnique: String!
  courseOfStudyShort: String!
  courseOfStudyName: String!
  level: String!
  examRegulation: String!
}

"""
Generisches Ergebnis für Mutations.
"""
type MutationResponse {
  """
  Gibt an, ob die Operation erfolgreich war.
  """
  success: Boolean!
  """
  Zusätzliche Informationen oder Fehlermeldungen.
  """
  message: String
  """
  Das Ergebnis der Mutation, z. B. die erstellte oder aktualisierte Entität.
  """
  result: EntityResult
}

type TokenResult {
  access_token: String!
  expires_in: Int!
  refresh_token: String!
  refresh_expires_in: Int!
  id_token: String!
  scope: String!
}

"""
Filterbedingungen für Abfragen.
"""
input FilterInput {
  """
  Das zu filternde Feld, z. B. userId oder orgUnit.
  """
  field: FilterOptions!
  """
  Der Vergleichsoperator, z. B. EQ oder IN.
  """
  operator: Operator!
  """
  Der Vergleichswert.
  """
  value: String!
}

"""
Mögliche Vergleichsoperatoren für Filterbedingungen.
"""
enum Operator {
  EQ
  IN
  GTE
  LTE
  LIKE
}

"""
Filterbare Felder für dynamische Abfragen.
"""
enum FilterOptions {
  userId
  userType
  userRole
  orgUnit
  active
  functionName
  name
  roleId
  processId
  parentId
  supervisor
  users
  roles
}
