# Hauptabfragen
type Query {
  getData(input: DataInput!): DataPayload!
  getProcessRoles(processId: ID!, userId: String!): RolePayload!
  getSavedData(id: ID!): MandatePayload
  getUsersByFunction(id: ID!): MandatePayload
  getAncestors(id: ID): [OrgUnit]

  getProcessesByUserId(userId: String!): [ProzessInstanz]
  getCamundaProcesses(filter: ProcessFilterInput): [ProzessInstanz!]!
  getTasks(filter: TaskFilterInput): [Task!]!
  searchTaskVariables(filter: VariableFilterInput): [TaskVariable!]!
  getProcessDefinitionXmlByKey(processDefinitionKey: ID!): String! # Ruft die Prozessdefinition als XML ab
}


input VariableFilterInput {
  filter: FilterVariableFilterInput
  size: Int
  sort: [CamundaSortInput]
}
input FilterVariableFilterInput {
key: ID # Eindeutige ID der Variablen
  processInstanceKey: String
  scopeKey: String
  name: String # Name der Variablen
  value: String # Wert der Variablen
  truncated: Boolean # Gibt an, ob der Wert abgeschnitten wurde
  tenantId: String
}


input IncludeVariableInput {
  name: String! # Name der Variablen
  alwaysReturnFullValue: Boolean! # Gibt an, ob der vollständige Wert zurückgegeben werden soll
}

type TaskVariable {
  key: ID! # Eindeutige ID der Variablen
  processInstanceKey: String
  scopeKey: String
  name: String! # Name der Variablen
  value: String # Wert der Variablen
  truncated: Boolean # Gibt an, ob der Wert abgeschnitten wurde
  previewValue: String # Vorschau des Variablenwerts
  tenantId: String
}

input TaskFilterInput {
  state: String # Mögliche Werte: CREATED, COMPLETED, CANCELED, FAILED
  assigned: Boolean # Gibt an, ob die Aufgabe zugewiesen ist
  assignee: String # Benutzername oder ID des zugewiesenen Benutzers
  assignees: [String] # Liste der Benutzer, die zugewiesen sind
  taskDefinitionId: String # ID des BPMN-Flow-Nodes
  candidateGroup: String # Gruppe, die in der Kandidatenliste ist
  candidateGroups: [String] # Gruppen, die in der Kandidatenliste sind
  candidateUser: String # Benutzer, der in der Kandidatenliste ist
  candidateUsers: [String] # Benutzer, die in der Kandidatenliste sind
  processDefinitionKey: String # Schlüssel der Prozessdefinition
  processInstanceKey: String # Schlüssel der Prozessinstanz
  pageSize: Int # Größe der Seite (Standard = 50)
  followUpDate: DateRangeInput # Nachverfolgungsdatum
  dueDate: DateRangeInput # Fälligkeitsdatum
  taskVariables: [TaskVariableFilterInput] # Filter für Variablen
  tenantIds: [String] # Liste der Mandanten-IDs
  sort: [SortInput] # Sortieroptionen
  searchAfter: [String] # Für Paginierung: Folgende Seite
  searchAfterOrEqual: [String] # Für Paginierung: Folgende Seite (inklusive aktueller)
  searchBefore: [String] # Für Paginierung: Vorherige Seite
  searchBeforeOrEqual: [String] # Für Paginierung: Vorherige Seite (inklusive aktueller)
  includeVariables: [IncludeVariableInput] # Eingeschlossene Variablen
  implementation: String # Mögliche Werte: JOB_WORKER, ZEEBE_USER_TASK
  priority: PriorityFilterInput # Prioritätsfilter
}

input DateRangeInput {
  from: String # Startdatum im ISO-Format
  to: String # Enddatum im ISO-Format
}

input TaskVariableFilterInput {
  name: String # Name der Variablen
  value: String # Wert der Variablen
  operator: String # Vergleichsoperator: eq, neq, gt, gte, lt, lte
}

input IncludeVariableInput {
  name: String # Name der Variablen
  alwaysReturnFullValue: Boolean # Gibt an, ob der vollständige Wert zurückgegeben werden soll
}

input PriorityFilterInput {
  eq: Int # Genau
  gte: Int # Größer oder gleich
  gt: Int # Größer
  lt: Int # Kleiner
  lte: Int # Kleiner oder gleich
}


type Task {
  id: ID! # Eindeutige ID der Aufgabe
  name: String! # Name der Aufgabe
  taskDefinitionId: String! # ID der Aufgaben-Definition
  processName: String! # Name des zugehörigen Prozesses
  creationDate: String! # Erstellungsdatum der Aufgabe
  completionDate: String # Abschlussdatum (null, wenn noch offen)
  assignee: String # Benutzer, der die Aufgabe zugewiesen bekommen hat
  taskState: String! # Zustand der Aufgabe (z. B. "CREATED")
  formKey: String # Schlüssel des Formulars (wenn zugewiesen)
  formId: String # ID des zugehörigen Formulars
  formVersion: Int # Version des Formulars
  isFormEmbedded: Boolean! # Gibt an, ob das Formular eingebettet ist
  processDefinitionKey: String! # Schlüssel der Prozessdefinition
  processInstanceKey: String! # Schlüssel der Prozessinstanz
  tenantId: String! # Mandanten-ID (kann leer sein)
  dueDate: String # Fälligkeitsdatum der Aufgabe (null, wenn nicht festgelegt)
  followUpDate: String # Datum für Nachverfolgung (null, wenn nicht festgelegt)
  candidateGroups: [String] # Kandidatengruppen für die Aufgabe
  candidateUsers: [String] # Kandidatenbenutzer für die Aufgabe
  variables: [TaskVariable] # Variablen der Aufgabe
  implementation: String! # Implementierungstyp (z. B. "userTask")
  priority: Int! # Priorität der Aufgabe
}

type TaskVariable {
  name: String! # Name der Variablen
  value: String # Wert der Variablen
  type: String # Typ der Variablen (z. B. String, Integer)
}

type ProzessInstanz {
  key: String
  processVersion: Int
  bpmnProcessId: String
  startDate: String
  state: String
  incident: Boolean
  processDefinitionKey: String
  tenantId: String
}

input ProcessFilterInput {
  filter: CamundaFilterInput
  size: Int
  sort: [CamundaSortInput]
}

input CamundaFilterInput {
key: Int
  processVersion: Int
  processVersionTag: String
  bpmnProcessId: String
  parentKey: Int
  parentFlowNodeInstanceKey: Int
  startDate: String
  endDate: String
  state: ProcessState
  incident: Boolean
  processDefinitionKey: Int
  tenantId: String
}

input CamundaSortInput {
  field: String
  order: OrderOptions
}

enum OrderOptions {
  ASC
  DESC
}

enum ProcessState {
  ACTIVE
  COMPLETED
  CANCELED
}

type MandatePayload {
  users: [User!]
  functionName: String
  isImpliciteFunction: Boolean
  _id: ID
  orgUnit: ID
}

# Abfrageparameter
"""
Input-Parameter für generische Abfragen.
"""
input DataInput {
  """
  Ziel-Entität für die Abfrage, z. B. USERS oder ROLES.
  """
  entity: EntityType!
  """
  Filterbedingungen, um die Abfrage zu präzisieren.
  """
  filter: FilterInput
  """
  Pagination-Parameter zur Steuerung der Ergebnisse.
  """
  pagination: PaginationInput
  """
  Sortierparameter für die Ergebnisse.
  """
  sort: SortInput
}

"""
Pagination-Parameter für die Steuerung von Ergebnisgrößen.
"""
input PaginationInput {
  """
  Anzahl der zurückzugebenden Ergebnisse (Standard: 10).
  """
  limit: Int = 10
  """
  Startpunkt der Ergebnisse (Standard: 0).
  """
  offset: Int = 0
}

"""
Filterbedingungen für Abfragen.
"""
input FilterInput {
  """
  Das zu filternde Feld, z. B. userId oder orgUnit.
  """
  field: FilterOptions
  """
  Der Vergleichsoperator, z. B. EQ oder IN.
  """
  operator: Operator
  """
  Der Vergleichswert.
  """
  value: String
  AND: [FilterInput]
  OR: [FilterInput]
  NOR: [FilterInput]
}

"""
Sortierparameter für Abfragen.
"""
input SortInput {
  """
  Feld, nach dem sortiert werden soll.
  """
  field: FilterOptions
  """
  Sortierreihenfolge, z. B. ASC oder DESC.
  """
  direction: directionInput
}

"""
Sortierreihenfolge für Abfragen.
"""
enum directionInput {
  ASC
  DESC
}

# Rückgabewerte
type RolePayload {
  roles: [RoleResult]
}

type RoleResult {
  roleName: String! # Dynamischer Rollenname (z. B. "Antragssteller", "Rechnungsprüfung")
  users: [UserFunctionResult] # Benutzer, die dieser Rolle zugeordnet sind
}

"""
Ergebnisstruktur für spezialisierte Benutzerabfragen.
"""
type UserResult {
  """
  Liste der Benutzer, die den Filterbedingungen entsprechen.
  """
  users: [User!]!
  """
  Gesamte Anzahl der Treffer.
  """
  totalCount: Int!
}

"""
Ergebnisstruktur für generische Abfragen.
"""
type DataPayload {
  """
  Liste der Ergebnisse basierend auf der Ziel-Entität.
  """
  data: [EntityResult!]!
  """
  Gesamte Anzahl der Treffer.
  """
  totalCount: Int!
}

"""
Ergebnisstruktur für generische Entitätsabfragen.
"""
union EntityResult = User | Function | Process | OrgUnit | Role

type UserFunctionResult {
  user: User
  functionName: String
}

# Benutzerentitäten
"""
Repräsentiert einen Benutzer in der Organisation.
"""
type User {
  """
  Eindeutige ID des Benutzers.
  """
  _id: ID
  """
  Benutzer-ID, z. B. Matrikelnummer oder Personalnummer.
  """
  userId: String
  """
  Typ des Benutzers, z. B. 'student' oder 'employee'.
  """
  userType: String
  """
  Rolle des Benutzers, z. B. 'admin' oder 'viewer'.
  """
  userRole: String
  """
  Organisationseinheit des Benutzers.
  """
  orgUnit: String
  """
  Gibt an, ob der Benutzer aktiv ist.
  """
  active: Boolean
  """
  Profil des Benutzers.
  """
  profile: Profile
  """
  Details zum Studenten (optional).
  """
  student: Student
  """
  Details zum Mitarbeiter (optional).
  """
  employee: Employee
  """
  Gültigkeitsdatum von.
  """
  validFrom: String
  """
  Gültigkeitsdatum bis.
  """
  validUntil: String
}

"""
Details eines Benutzers, falls dieser ein Student ist.
"""
type Student {
  """
  Eindeutige ID des Studenten.
  """
  _id: ID
  """
  Studiengang des Studenten.
  """
  courseOfStudy: String!
  """
  Einzigartiger Studiengangscode.
  """
  courseOfStudyUnique: String!
  """
  Kurzbezeichnung des Studiengangs.
  """
  courseOfStudyShort: String!
  """
  Vollständiger Name des Studiengangs.
  """
  courseOfStudyName: String!
  """
  Studienniveau, z. B. Bachelor oder Master.
  """
  level: String!
  """
  Prüfungsordnung, die für den Studenten gilt.
  """
  examRegulation: String!
}

"""
Details eines Benutzers, falls dieser ein Mitarbeiter ist.
"""
type Employee {
  """
  Kostenstelle des Mitarbeiters.
  """
  costCenter: String!
  """
  Abteilung, in der der Mitarbeiter tätig ist.
  """
  department: String!
}

"""
Profilinformationen eines Benutzers.
"""
type Profile {
  """
  Vorname des Benutzers.
  """
  firstName: String
  """
  Nachname des Benutzers.
  """
  lastName: String
}

# Organisationseinheiten
"""
Repräsentiert eine Organisationseinheit, z. B. Fakultäten oder Abteilungen.
"""
type OrgUnit {
  """
  Eindeutige ID der Organisationseinheit.
  """
  _id: ID!
  """
  Name der Organisationseinheit.
  """
  name: String!
  """
  ID der übergeordneten Organisationseinheit (optional).
  """
  parentId: ID
  """
  Verantwortlicher der Organisationseinheit.
  """
  supervisor: String
  alias: String
  kostenstelleNr: String
  type: String
}

# Funktionen
"""
Repräsentiert eine Funktion innerhalb der Organisation, z. B. 'Professor'.
"""
type Function {
  """
  Eindeutige ID der Funktion.
  """
  _id: ID!
  """
  Name der Funktion.
  """
  functionName: String!
  """
  Liste der Benutzer, die dieser Funktion zugeordnet sind.
  """
  users: [String!]!
  """
  Organisationseinheit, der die Funktion zugeordnet ist.
  """
  orgUnit: String!
  """
  Typ der Funktion, z. B. 'academic' oder 'administrative'.
  """
  type: String
  """
  Gibt an, ob die Funktion nur von einem Benutzer besetzt werden kann.
  """
  isSingleUser: Boolean
  """
  Gibt an, ob die Funktion implizit ist und nicht manuell zugewiesen werden kann.
  """
  isImpliciteFunction: Boolean

  query: GraphQlQuery
}

type GraphQlQuery {
  """
  Die Ziel-Entität der Abfrage, z. B. USERS, MANDATES.
  """
  entity: EntityType
  """
  Filterbedingungen der Abfrage.
  """
  filter: Filter
  """
  Pagination-Parameter der Abfrage.
  """
  pagination: Pagination
  """
  Sortierparameter der Abfrage.
  """
  sort: Sort
}

"""
Filterbedingungen als Output-Typ.
"""
type Filter {
  """
  Das zu filternde Feld, z. B. userId oder orgUnit.
  """
  field: FilterOptions
  """
  Der Vergleichsoperator, z. B. EQ oder IN.
  """
  operator: Operator
  """
  Der Vergleichswert.
  """
  value: String
  AND: [Filter]
  OR: [Filter]
  NOR: [Filter]
}

"""
Pagination-Parameter als Output-Typ.
"""
type Pagination {
  """
  Anzahl der zurückzugebenden Ergebnisse.
  """
  limit: Int
  """
  Startpunkt der Ergebnisse.
  """
  offset: Int
}

"""
Sortierparameter als Output-Typ.
"""
type Sort {
  """
  Feld, nach dem sortiert werden soll.
  """
  field: FilterOptions
  """
  Sortierreihenfolge, z. B. ASC oder DESC.
  """
  direction: directionInput
}


# Prozesse und Rollen
"""
Repräsentiert einen Prozess, z. B. 'Dienstreiseantrag'.
"""
type Process {
  """
  Eindeutige ID des Prozesses.
  """
  _id: ID!
  """
  Name des Prozesses.
  """
  parentId: String
  name: String
  """
  Eindeutige Prozess-ID.
  """
  processId: String
  """
  Liste der Rollen, die mit dem Prozess verknüpft sind.
  """
  roles: [ProcessRole]
}

"""
Definiert eine Rolle innerhalb eines Prozesses.
"""
type ProcessRole {
  """
  Eindeutiger Schlüssel der Rolle.
  """
  roleName: String
  """
  Eindeutige ID der Rolle.
  """
  roleId: String
}

# Rollen mit dynamischen Abfragen
"""
Definiert eine Rolle in der Organisation mit Abfragebedingungen.
"""
type Role {
  """
  Eindeutige ID der Rolle.
  """
  _id: ID!
  """
  Name der Rolle.
  """
  name: String!
  """
  Eindeutige ID der Rolle.
  """
  roleId: String!
  """
  Dynamische Abfragebedingungen für die Rolle.
  """
  query: [QueryStage!]!
}

"""
Dynamische Abfragebedingungen für Rollen.
"""
type QueryStage {
  """
  Feldname der Abfragebedingung.
  """
  key: String!
  """
  Vergleichswert der Abfragebedingung.
  """
  value: String!
}

# Enums für Konsistenz
"""
Verfügbare Entitäten für dynamische Abfragen.
"""
enum EntityType {
  USERS
  MANDATES
  PROCESSES
  ROLES
  ORG_UNITS
}

"""
Mögliche Vergleichsoperatoren für Filterbedingungen.
"""
enum Operator {
  EQ
  IN
  GTE
  LTE
  LIKE
}

"""
Filterbare Felder für dynamische Abfragen.
"""
enum FilterOptions {
  _id
  userId
  userType
  userRole
  orgUnit
  active
  functionName
  name
  roleId
  processId
  parentId
  supervisor
  users
  roles
  type
  courseOfStudy
  level
  isImpliciteFunction
  isSingleUser

  examRegulation
  costCenter
  department
  courseOfStudyUnique
  courseOfStudyShort
  courseOfStudyName
  alias
  kostenstelleNr

  firstName
  lastName
}

type Mutation {
  """
  Erstellt eine neue Entität, z. B. einen Benutzer, eine Funktion oder eine Organisationseinheit.
  """
  createEntity(input: CreateEntityInput!): MutationResponse!

  """
  Aktualisiert eine vorhandene Entität basierend auf Filtern und übergebenen Daten.
  """
  updateEntity(input: UpdateEntityInput!): MutationResponse!

  """
  Löscht eine oder mehrere Entitäten basierend auf Filterbedingungen.
  """
  deleteEntity(input: DeleteEntityInput!): MutationResponse!

  """
  Authentifiziert einen Benutzer und gibt ein Token zurück.
  """
  authenticate(username: String!, password: String!): TokenResult!

  """
  Erneuert ein abgelaufenes Token basierend auf einem gültigen Refresh-Token.
  """
  refreshToken(refreshToken: String!): TokenResult!

  """
  Fügt einen Benutzer zu einer Funktion hinzu.
  """
  addUserToFunction(functionName: String!, userId: String!): Function

  """
  Entfernt einen Benutzer aus einer Funktion.
  """
  removeUserFromFunction(functionName: String!, userId: String!): Function

  saveQuery(functionName: String!, orgUnitId: ID!, input: DataInput!): SavedQueryPayload
  startProcess(processKey: String!, variables: String): String!
}

type SavedQueryPayload {
  success: Boolean!
  message: String
  result: Function
}
"""
Input für das Erstellen einer neuen Entität.
"""
input CreateEntityInput {
  """
  Ziel-Entität, z. B. USERS, MANDATES.
  """
  entity: EntityType!
  """
  Daten für die neue Entität.
  """
  userData: CreateUserInput
  functionData: CreateFunctionInput
  processData: CreateProcessInput
  orgUnitData: CreateOrgUnitInput
  roleData: CreateRoleInput
}

input CreateUserInput {
  userId: String!
  userType: String!
  userRole: String!
  orgUnit: String
  active: Boolean = true
  student: CreateStudentInput
  employee: CreateEmployeeInput
}

input CreateStudentInput {
  courseOfStudy: String!
  courseOfStudyUnique: String!
  level: String!
  examRegulation: String!
}

input CreateEmployeeInput {
  costCenter: String!
  department: String!
}

input CreateFunctionInput {
  functionName: String!
  orgUnit: String!
  type: String
  users: [String!]!
  isSingleUser: Boolean
  isImpliciteFunction: Boolean
}

input CreateProcessInput {
  processId: String!
  name: String!
  roles: [ProcessRoleInput!]!
}

input ProcessRoleInput {
  roleKey: String!
  roleId: String!
}

input CreateOrgUnitInput {
  name: String!
  parentId: ID
  supervisor: String
}

input CreateRoleInput {
  roleId: String!
  name: String!
  query: [QueryStageInput!]
}

input QueryStageInput {
  key: String!
  value: String!
}

# """
# Datenstruktur für das Erstellen neuer Entitäten.


"""
Input für das Aktualisieren von Entitäten.
"""
input UpdateEntityInput {
  """
  Ziel-Entität, z. B. USERS, MANDATES.
  """
  entity: EntityType!
  """
  Filterbedingungen, um die zu aktualisierende Entität zu finden.
  """
  filter: FilterInput
  """
  Neue Werte für die Entität.
  """
  userData: UpdateUserInput
  functionData: UpdateFunctionInput
  processData: UpdateProcessInput
  orgUnitData: UpdateOrgUnitInput
  roleData: UpdateRoleInput
}

input UpdateUserInput {
  userId: String
  userType: String
  userRole: String
  orgUnit: String
  active: Boolean
  validFrom: String
  validUntil: String
  student: UpdateStudentInput
  employee: UpdateEmployeeInput
}

input UpdateStudentInput {
  courseOfStudy: String
  level: String
  examRegulation: String
}

input UpdateEmployeeInput {
  costCenter: String
  department: String
}

input UpdateFunctionInput {
  functionName: String
  orgUnit: String
  type: String
  users: [String!]
  isSingleUser: Boolean
}

input UpdateProcessInput {
  processId: String
  name: String
  roles: [ProcessRoleInput]
}

input UpdateOrgUnitInput {
  orgUnitId: String
  name: String
  parentId: String
  supervisor: String
}

input UpdateRoleInput {
  roleId: String
  name: String
  query: [QueryStageInput]
}



"""
Input für das Löschen von Entitäten.
"""
input DeleteEntityInput {
  """
  Ziel-Entität, z. B. USERS, MANDATES.
  """
  entity: EntityType!
  """
  Filterbedingungen, um die zu löschende Entität zu identifizieren.
  """
  filter: FilterInput
}

"""
Generisches Ergebnis für Mutations.
"""
type MutationResponse {
  """
  Gibt an, ob die Operation erfolgreich war.
  """
  success: Boolean!
  """
  Zusätzliche Informationen oder Fehlermeldungen.
  """
  message: String
  """
  Das Ergebnis der Mutation, z. B. die erstellte oder aktualisierte Entität.
  """
  result: EntityResult
  """
  Anzahl der betroffenen Entitäten.
  """
  affectedCount: Int
  """
  Warnungen oder Hinweise zur Operation.
  """
  warnings: [String]
}

type TokenResult {
  access_token: String!
  expires_in: Int!
  refresh_token: String!
  refresh_expires_in: Int!
  id_token: String!
  scope: String!
}
